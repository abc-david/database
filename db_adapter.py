"""
MODULE: services/database/db_adapter.py
PURPOSE: Adapter for the database connector to support the project_management module
AUTHOR: Generated by Cursor AI

This module provides compatibility functions and adapters to bridge the gap
between the main project's database connector and what the project_management
module expects.
"""

import functools
import logging
import asyncio
from typing import Any, Callable, Dict, List, Optional, Tuple, Union

from services.database.db_connector import DBConnector

logger = logging.getLogger(__name__)

# Create a decorator that can be used as a replacement for with_db_connection
def with_db_connection(func):
    """
    Decorator to provide a database connection for the wrapped function.
    
    This is an adapter to provide compatibility with the project_management module.
    It automatically handles acquiring and releasing connections.
    
    Args:
        func: The function to wrap
        
    Returns:
        A wrapped function that receives a database connection
    """
    @functools.wraps(func)
    async def wrapper(*args, **kwargs):
        db = DBConnector()
        async with db.transaction() as conn:
            return await func(conn, *args, **kwargs)
    return wrapper

# Add insert and execute_query methods to DBConnector to match what project_management expects
def _patch_db_connector():
    """Apply patches to DBConnector class to make it compatible with project_management module."""
    
    # Add insert method if it doesn't exist
    if not hasattr(DBConnector, 'insert'):
        async def insert(self, table: str, data: Dict[str, Any], schema: str = None) -> str:
            """
            Insert data into a table.
            
            Args:
                table: Table name
                data: Column-value pairs to insert
                schema: Optional schema name
                
            Returns:
                Query execution status
            """
            columns = list(data.keys())
            placeholders = [f"${i+1}" for i in range(len(columns))]
            values = list(data.values())
            
            query = f"INSERT INTO {schema+'.' if schema else ''}{table} ({', '.join(columns)}) VALUES ({', '.join(placeholders)})"
            return await self.execute(query, tuple(values))
        
        DBConnector.insert = insert
    
    # Add execute_query method if it doesn't exist
    if not hasattr(DBConnector, 'execute_query'):
        async def execute_query(self, query: str, params: tuple = None, schema: str = None) -> List[Tuple]:
            """
            Execute a query and return all results.
            
            Args:
                query: SQL query string
                params: Query parameters
                schema: Optional schema name
                
            Returns:
                List of tuples containing the query results
            """
            # Replace %s placeholders with $n placeholders if needed
            if params and '%s' in query:
                for i in range(query.count('%s')):
                    query = query.replace('%s', f'${i+1}', 1)
            
            return await self.execute(query, params, fetch_all=True, schema=schema)
        
        DBConnector.execute_query = execute_query

# Apply the patches
_patch_db_connector() 